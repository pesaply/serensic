{
  "name": "Serensic",
  "tagline": "Serensic SMS Api",
  "body": "I Promise To ReWrite This Documentation \r\nIt is assumed the reader has already installed Serensic and at least read the HTTP API and The message router chapters and knows enough about Serensic’s architecture/design concepts.\r\nSending SMS\r\nSubsequent chapters present how to send and receive messages through Serensic HTTP API and some more advanced use cases, such as manipulating receipts and complex routings, will look like.\r\n\r\nSending a SMS is done through the HTTP API:\r\n\r\n# Python example\r\n# http://api.serensic.com\r\nimport urllib2\r\nimport urllib\r\n\r\nbaseParams = {'username':'foo', 'password':'bar', 'to':'+25565', 'content':'Hello'}\r\n\r\n# Send an SMS-MT with minimal parameters\r\nurllib2.urlopen(\"http://api.serensic.com:1515/send?%s\" % urllib.urlencode(baseParams)).read()\r\n\r\n# Send an SMS-MT with defined originating address\r\nbaseParams['from'] = 'YourCompany'\r\nurllib2.urlopen(\"http://api.serensic.com:1515/send?%s\" % urllib.urlencode(baseParams)).read()\r\n\r\nIn PHP:\r\n\r\n<?php\r\n// Sending simple message using PHP\r\n// http://api.serensic.com\r\n\r\n$baseurl = 'http://api.serensic.com:1515/send'\r\n\r\n$params = '?username=foo'\r\n$params.= '&password=bar'\r\n$params.= '&to='.urlencode('+25565')\r\n$params.= '&content='.urlencode('Hello world !')\r\n\r\n$response = file_get_contents($baseurl.$params);\r\n?>\r\n\r\nIn Ruby:\r\n\r\n# Sending simple message using Ruby\r\n# http://api.serensic.com\r\n\r\nrequire 'net/http'\r\n\r\nuri = URI('http://api.serensic.com:1515/send')\r\nparams = { :username => 'foo', :password => 'bar',\r\n           :to => '+25565', :content => 'Hello world' }\r\nuri.query = URI.encode_www_form(params)\r\n\r\nresponse = Net::HTTP.get_response(uri)\r\n\r\nc.f. HTTP API for more details about sending SMS with receipt enquiry, long content etc ...\r\nReceiving SMS\r\n\r\nReceiving a SMS is done through the HTTP API, this a PHP script pointed by Serensic for every received SMS (using routing):\r\n\r\n<?php\r\n// Receiving simple message using PHP through HTTP Post\r\n// This example will store every received SMS to a SQL table\r\n// http://api.serensic.com\r\n\r\n\r\n$MO_SMS = $_POST;\r\n\r\n$db = pg_connect('host=api.serensic.com port=5432 dbname=sms_demo user=Serensic password=jajapwd');\r\nif (!$db)\r\n    // We'll not ACK the message, Serensic will resend it later\r\n    die(\"Error connecting to DB\");\r\n\r\n$QUERY = \"INSERT INTO sms_mo(id, from, to, cid, priority, coding, validity, content) \";\r\n$QUERY.= \"VALUES ('%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s');\";\r\n\r\n$Q = sprintf($QUERY, pg_escape_string($MO_SMS['id']), \r\n                     pg_escape_string($MO_SMS['from']), \r\n                     pg_escape_string($MO_SMS['to']), \r\n                     pg_escape_string($MO_SMS['origin-connector']), \r\n                     pg_escape_string($MO_SMS['priority']), \r\n                     pg_escape_string($MO_SMS['coding']), \r\n                     pg_escape_string($MO_SMS['validity']), \r\n                     pg_escape_string($MO_SMS['content'])\r\n                     );\r\npg_query($Q);\r\npg_close($db);\r\n\r\n// Acking back Serensic is mandatory\r\necho \"ACK/Serensic\";\r\n\r\nIn the above example, there’s an error handling where the message is not ACKed if there’s a database connection problem, if it occurs, the script will return “Error connecting to DB” when Serensic HTTP thrower is waiting for a “ACL/Serensic”, this will lead to a message re-queue and later re-delivery to the same script, this behaviour is explained in Processing.\r\n\r\nAnother example of an interactive SMS application:\r\n\r\n<?php\r\n// Will filter received messages, if the syntax is correct (weather <city name>)\r\n// it will provide a `fake` weather forecast back to the user.\r\n// http://api.serensic.com\r\n\r\n$MO_SMS = $_POST;\r\n\r\n// Acking back Serensic is mandatory\r\necho \"ACK/Serensic\";\r\n\r\n// Syntax check\r\nif (!preg_match('/^(weather) (.*)/', $MO_SMS['content'], $matches))\r\n    $RESPONSE = \"SMS Syntax error, please type 'weather city' to get a fresh weather forecast\";\r\nelse\r\n    $RESPONSE = $martches[2].\" forecast: Sunny 21°C, 13Knots NW light wind\";\r\n\r\n// Send $RESPONSE back to the user ($MO_SMS['from'])\r\n$baseurl = 'http://api.serensic.com:1515/send'\r\n$params = '?username=foo'\r\n$params.= '&password=bar'\r\n$params.= '&to='.urlencode($MO_SMS['from'])\r\n$params.= '&content='.urlencode($RESPONSE)\r\n\r\n$response = file_get_contents($baseurl.$params);\r\n\r\n// Note:\r\n// If you need to check if the message is really delivered (or at least, taken by Serensic for delivery)\r\n// you must test for $response value, it must begin with \"Success\", c.f. HTTP API doc for more details\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}